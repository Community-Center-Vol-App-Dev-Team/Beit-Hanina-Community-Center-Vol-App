# All the Rules to be followed and implemented during this project

## **code rules**

1. Maintain code readability and modularty
1. Clear comments throughout the code
1. No needless comments (exmaple x++ // increments x by 1 )
1. All functions written by us must be documanted with a docstring
1. Consistent Naming Conventions
   1. camelCase: for variables and functions.
   1. UPPER_SNAKE_CASE: for constants
   1. PascalCase: for class names.
1. test all changes (a protocol for testing will be made later)
1. Avoid hard coding we will use config files
1. Maintain security all sensitive data like api keys or passwords will be saved in a password file
1. maintain ocp that we have learend.
1. error handeling any external functions that return erros must be encaplsated with a handel
1. detailed error messages

### **github Rules**

- No changes on main all code will be done on a branch then pulled
- No push to main always make a pull request and dont merge
- when making a pull request set project leader as the assignee
- a change or addition must pass all tests before going on to main
- follow repo struct src/ tests/ docs/ assets/
- use git ignore to exclude unnecessary files
- branch naming feature-featureName-branch or bugfix-bugName-branch
- commit messages must be detailed and explain changes that have been made <type>(<scope>): <desc>
- use issues to track bugs and features
- whenever implemeting a new feature or fix pull from main to have the latest version
- nested branching is allowed, pull request the final version

### WorkFlow

- start an issue
- Create a feature or bugfix branch.
- Implement and Test
- Push and Create a PR
- Code Review
- merge to main
